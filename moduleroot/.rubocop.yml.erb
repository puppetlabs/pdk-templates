<%-
# note that these hashes need to use rockets, not colons, because rubocop config requires strings as keys
defaults = {
  'require' => [
    'rubocop-rspec',
    'rubocop-i18n',
  ],
  'AllCops' => {
    'DisplayCopNames' => true,
    'TargetRubyVersion' => '2.5',
    'Include' => [
      './**/*.rb',
    ],
    'Exclude'=> [
      'bin/*',
      '.vendor/**/*',
      '**/Gemfile',
      '**/Rakefile',
      'pkg/**/*',
      'spec/fixtures/**/*',
      'vendor/**/*',
      '**/Puppetfile',
      '**/Vagrantfile',
      '**/Guardfile',
    ],
  },
}

if @configs['include_todos']
  defaults['inherit_from'] = '.rubocop_todo.yml'
end

require 'deep_merge/core'
profile = @configs['profiles'][@configs['selected_profile']]
configs = defaults.dup
DeepMerge::deep_merge!(profile['configs'], configs, knockout_prefix: "--", preserve_unmergeables: false)

default_version = '0.49.1'

# rubocop's dependencies have native extensions and are not available on windows currently
# to preserve the dynamic behaviour, and still work in its current state, this workaround
# will keep the lights on
version = begin
  require 'rubocop/version'
  RuboCop::Version.version
rescue LoadError
  default_version
end

# If people have a different rubocop installed, and supported in their template
# this allows them to use that configuration.
# If the rubocop version is not installed, fall back to the default
base_path = File.join(__FILE__, '..', '..', 'rubocop')
dynamic_path = File.absolute_path(File.join(base_path, "defaults-#{version}.yml"))
default_path = File.absolute_path(File.join(base_path, "defaults-#{default_version}.yml"))
path = File.exist?(dynamic_path) ? dynamic_path : default_path

require 'yaml'
default_enabled_cops = YAML.load(File.read(path))[:default_enabled_cops]

cop_configs = (profile['enabled_cops'] || {})

enabled_cops = cop_configs.keys
enabled_cops = default_enabled_cops if enabled_cops == 'all'

(enabled_cops & default_enabled_cops).sort.each { |c| configs[c] ||= cop_configs[c] if cop_configs[c] }
(enabled_cops - default_enabled_cops).sort.each { |c| configs[c] ||= cop_configs[c] || {}; configs[c]['Enabled'] = true }
(default_enabled_cops - enabled_cops).sort.each { |c| configs[c] ||= cop_configs[c] || {}; configs[c]['Enabled'] = false }
-%>
<%= YAML.dump(configs) -%>
